name: Cross-Platform Build

on:
  push:
    branches: [main]

jobs:
  android-build:
    name: Android Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version-file: pubspec.yaml

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties

      - name: Set up keystore
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android/app/upload-keystore.jks

      - name: Install dependencies
        run: flutter pub get

        # 构建带签名的 APK
      - name: Build Universal APK
        run: flutter build apk --release

      - name: Move Universal APK
        run: |
          mkdir -p artifacts/universal
          mv build/app/outputs/apk/release/app-release.apk artifacts/universal/app-universal-release.apk

      - name: Build Split APKs
        run: flutter build apk --split-per-abi

      - name: Move Split APKs
        run: |
          mkdir -p artifacts/split
          mv build/app/outputs/apk/release/*.apk artifacts/split/

      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: artifacts/
          retention-days: 5

      - name: Notify Android Build
        uses: dawidd6/action-send-mail@v5
        with:
          server_address: smtp.qq.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Android Build Success
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          body: Android build completed. APKs attached.
          attachments: artifacts/split/app-arm64-v8a-release.apk

  ios-build:
    name: iOS Build
    runs-on: macos-15

    steps:
      - uses: actions/checkout@v3

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version-file: pubspec.yaml
          architecture: x64

      - run: sudo xcode-select --switch /Applications/Xcode_16.0.app

      - run: flutter pub get

      - name: Build unsigned IPA
        run: |
          flutter build ios --release --no-codesign
          mkdir -p build/ios/iphoneos/Payload
          mv build/ios/iphoneos/Runner.app build/ios/iphoneos/Payload/
          cd build/ios/iphoneos/
          zip -r no-codesign-ios.ipa Payload

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: build/ios/iphoneos/no-codesign-ios.ipa
          retention-days: 5

      - name: Notify iOS Build
        uses: dawidd6/action-send-mail@v5
        with:
          server_address: smtp.qq.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: iOS Build Success
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          body: iOS build completed. IPA attached.
          attachments: build/ios/iphoneos/no-codesign-ios.ipa

  windows-build:
    name: Windows Build
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version-file: pubspec.yaml

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows Release
        run: flutter build windows --release

      - name: Install Inno Setup
        run: choco install innosetup --no-progress -y

      - name: Read app info from pubspec.yaml and exe
        id: get_info
        shell: pwsh
        run: |
          # 读取版本号
          $versionLine = Select-String -Path "pubspec.yaml" -Pattern "^version:\s*(.+)$"
          $version = $versionLine.Matches[0].Groups[1].Value.Split("+")[0].Trim()

          # 读取应用名
          $nameLine = Select-String -Path "pubspec.yaml" -Pattern "^name:\s*(.+)$"
          $rawName = $nameLine.Matches[0].Groups[1].Value.Trim()
          # 转换成首字母大写的友好名称
          $appName = ($rawName -replace "_", " ") -split " " | ForEach-Object { $_.Substring(0,1).ToUpper() + $_.Substring(1) } -join " "

          # 查找生成的 exe 文件名
          $exePath = Get-ChildItem -Path "build/windows/runner/Release" -Filter "*.exe" | Select-Object -First 1
          $exeName = $exePath.Name

          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "appName=$appName" >> $env:GITHUB_OUTPUT
          echo "exeName=$exeName" >> $env:GITHUB_OUTPUT

      - name: Create Inno Setup Script
        shell: pwsh
        run: |
          $version = "${{ steps.get_info.outputs.version }}"
          $appName = "${{ steps.get_info.outputs.appName }}"
          $exeName = "${{ steps.get_info.outputs.exeName }}"
          $outputFile = "$appName-Setup-v$version"

          echo "[Setup]" > installer.iss
          echo "AppName=$appName" >> installer.iss
          echo "AppVersion=$version" >> installer.iss
          echo "DefaultDirName={autopf}\$appName" >> installer.iss
          echo "DefaultGroupName=$appName" >> installer.iss
          echo "OutputBaseFilename=$outputFile" >> installer.iss
          echo "Compression=lzma" >> installer.iss
          echo "SolidCompression=yes" >> installer.iss
          echo "" >> installer.iss
          echo "[Files]" >> installer.iss
          echo "Source: \"build\\windows\\runner\\Release\\*\"; DestDir: \"{app}\"; Flags: recursesubdirs" >> installer.iss
          echo "" >> installer.iss
          echo "[Icons]" >> installer.iss
          echo "Name: \"{group}\$appName\"; Filename: \"{app}\\$exeName\"" >> installer.iss
          echo "Name: \"{userdesktop}\$appName\"; Filename: \"{app}\\$exeName\"" >> installer.iss
          echo "" >> installer.iss
          echo "[Run]" >> installer.iss
          echo "Filename: \"{app}\\$exeName\"; Flags: nowait postinstall skipifsilent" >> installer.iss

      - name: Build Installer
        run: '"C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss'

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: "*.exe"
          retention-days: 5
